from bn256.gfp2 import Gfp2
from bn256.gfp6 import Gfp6


class TestGfp6:
    a = Gfp6(
        x=Gfp2(x=239487238491, y=2356249827341),
        y=Gfp2(x=82659782, y=182703523765),
        z=Gfp2(x=978236549263, y=64893242),
    )
    b = Gfp6(
        x=Gfp2(x=252936598265329856238956532167968, y=23596239865236954178968),
        y=Gfp2(x=95421692834, y=236548),
        z=Gfp2(x=924523, y=12954623),
    )
    k = Gfp2(x=23423492374, y=12934872398472394827398470)

    def test_gfp6_invert(self):  # ✅
        c1 = self.a.invert()
        expected_x = (
            10211855099338378644088947857512467690406423424249015056368860815698196739294,
            3134504028207579601150745630868434457116316778517122924163843026892525392583,
        )
        expected_y = (
            5241717596845684903285091044640627420838141240665759463913789989572578393492,
            15720365656174927770678238143305737983456244206440288534263158097921408605708,
        )
        expected_z = (
            14848791808855588491484189510024517075573586218808653082791615642131904573684,
            2158867892572512381270353317588752540472649661760297671034987294727897423095)

        assert (c1.x.x, c1.x.y) == expected_x
        assert (c1.y.x, c1.y.y) == expected_y
        assert (c1.z.x, c1.z.y) == expected_z

        c2 = ~self.a
        assert (c2.x.x, c2.x.y) == expected_x
        assert (c2.y.x, c2.y.y) == expected_y
        assert (c2.z.x, c2.z.y) == expected_z

    def test_gfp6_square(self):  # ✅
        c1 = self.a.square()
        assert c1.x.x, c1.x.y == (
            4610000687272735491393470,
            21888242871839275222246405745257275088696311157297823227825078490747878591062,
        )
        assert c1.y.x, c1.y.y == (16009265409630947409513836, 48322310465118592359904866)
        assert c1.z.x, c1.z.y == (1652176392998308668830084, 6703709705497976318969095)

    def test_gfp6_double(self):  # ✅
        c1 = self.a.double()
        assert c1.x.x, c1.x.y == (478974476982, 4712499654682)
        assert c1.y.x, c1.y.y == (165319564, 365407047530)
        assert c1.z.x, c1.z.y == (1956473098526, 129786484)

    def test_gfp6_negative(self):  # ✅
        c1 = self.a.negative()
        expected_x = (
            21888242871839275222246405745257275088696311157297823662689037894405738970092,
            21888242871839275222246405745257275088696311157297823662689037892288976381242,
        )
        expected_y = (
            21888242871839275222246405745257275088696311157297823662689037894645143548801,
            21888242871839275222246405745257275088696311157297823662689037894462522684818,
        )
        expected_z = (
            21888242871839275222246405745257275088696311157297823662689037893666989659320,
            21888242871839275222246405745257275088696311157297823662689037894645161315341,
        )
        assert c1.x.x, c1.x.y == expected_x
        assert c1.y.x, c1.y.y == expected_y
        assert c1.z.x, c1.z.y == expected_z

        c3 = -self.a
        assert c3.x.x, c3.x.y == expected_x
        assert c3.y.x, c3.y.y == expected_y
        assert c3.z.x, c3.z.y == expected_z

    def test_gfp6_is_zero(self):  # ✅
        a = Gfp6(Gfp2(0, 0), Gfp2(0, 0), Gfp2(0, 0))
        assert a.is_zero() is True
        assert a.is_one() is False

    def test_gfp6_is_one(self):  # ✅
        a = Gfp6(Gfp2(0, 0), Gfp2(0, 0), Gfp2(0, 1))
        assert a.is_zero() is False
        assert a.is_one() is True

    def test_gfp6_eq(self):  # ✅
        b = -self.a
        assert self.a + b == Gfp6.zero()

    def test_gfp6_ne(self):  # ✅
        a = Gfp6.zero()
        b = Gfp6.one()
        assert a != b

    def test_gfp6_string(self):  # ✅
        assert self.a.string() == "((239487238491,2356249827341),(82659782,182703523765),(978236549263,64893242))"

    def test_gfp6_repr(self):  # ✅
        assert repr(self.a) == "<Gfp6 ((239487238491,2356249827341),(82659782,182703523765),(978236549263,64893242))>"

    def test_gfp6_add(self):  # ✅
        c1 = self.a + self.b
        assert c1.x.x, c1.x.y == (252936598265329856239196019406459, 23596239867593204006309)
        assert c1.y.x, c1.y.y == (95504352616, 182703760313)
        assert c1.z.x, c1.z.y == (978237473786, 77847865)

        c2 = self.a.add(self.b)
        assert c2.x.x, c2.x.y == (252936598265329856239196019406459, 23596239867593204006309)
        assert c2.y.x, c2.y.y == (95504352616, 182703760313)
        assert c2.z.x, c2.z.y == (978237473786, 77847865)

    def test_gfp6_self_add(self):  # ✅
        a = self.a.copy()
        a += self.b
        assert a.x.x, a.x.y == (252936598265329856239196019406459, 23596239867593204006309)
        assert a.y.x, a.y.y == (95504352616, 182703760313)
        assert a.z.x, a.z.y == (978237473786, 77847865)

    def test_gfp6_sub(self):  # ✅
        c1 = self.a - self.b
        expected_x = (
            21888242871839275222246405745257275088696310904361225397359181655928181279106,
            21888242871839275222246405745257275088696311157297823639092798031764521856956,
        )
        expected_y = (
            21888242871839275222246405745257275088696311157297823662689037894549887175531,
            182703287217,
        )
        expected_z = (978235624740, 51938619)
        assert c1.x.x, c1.x.y == expected_x
        assert c1.y.x, c1.y.y == expected_y
        assert c1.z.x, c1.z.y == expected_z

        c2 = self.a.sub(self.b)
        assert c2.x.x, c2.x.y == expected_x
        assert c2.y.x, c2.y.y == expected_y
        assert c2.z.x, c2.z.y == expected_z

    def test_gfp6_self_sub(self):  # ✅
        a = self.a.copy()
        a -= self.b
        assert a.x.x, a.x.y == (
            21888242871839275222246405745257275088696310904361225397359181655928181279106,
            21888242871839275222246405745257275088696311157297823639092798031764521856956,
        )
        assert a.y.x, a.y.y == (
            21888242871839275222246405745257275088696311157297823662689037894549887175531,
            182703287217,
        )
        assert a.z.x, a.z.y == (978235624740, 51938619)

    def test_gfp6_mul(self):  # ✅
        expected_x = (
            16413898964593091939613184349553722662622,
            21888242871839275222246405745257027656871241760838802521866785702023521828937,
        )
        expected_y = (
            5303261256592716497672434396021733901630694417,
            21888242871839275222246405745256133931093928148897004335825504284933392517290,
        )

        expected_z = (
            415890762450127797053562430763842029741474955,
            21888242871839275222246405745257228688119401095538040444087672601531753994104,
        )

        c1 = self.a * self.b
        assert c1.x.x, c1.x.y == expected_x
        assert c1.y.x, c1.y.y == expected_y
        assert c1.z.x, c1.z.y == expected_z

        c2 = self.a.mul(self.b)
        assert c2.x.x, c2.x.y == expected_x
        assert c2.y.x, c2.y.y == expected_y
        assert c2.z.x, c2.z.y == expected_z

        c3 = self.b.mul(self.a)
        assert c3.x.x, c3.x.y == expected_x
        assert c3.y.x, c3.y.y == expected_y
        assert c3.z.x, c3.z.y == expected_z

    def test_gfp6_mul2(self):
        x = Gfp6(
            Gfp2(0, 0),
            Gfp2(1230963705252006574968625547542839295238587053038599988423323938940672873063,
                 11069569486811739057372884831879058296880156543308488198782892089307577125126),
            Gfp2(-6902852904101142470231558828490340946421060521505186027374637519751440430128,
                 -17966680078898033203359394977380822095549635988564624048266162560560882297745)
        )
        y = Gfp6(
            Gfp2(-17864562046483384186106771228025795594455556469092587122459128393226268162833,
                 -12605821315909218821094826952298177528448917002050208798060509885274777411037),
            Gfp2(19532505252101439458991265327300432124487443519061783268256624996808904571292,
                 18658886069101525963899380261551116852616645416241590902916008822406296053835),
            Gfp2(40636818912914033342269871350756433907490646278304408173723078646758548463706,
                 142174671732088632065083726521707191129976629469893146158401069498771273111221),
        )
        v0 = x.mul(y)
        assert v0.x.x == 25582781009397120468354576527862577486656379480235475788816581514244660196843
        assert v0.x.y == 24722617591602545305299361896190556326022845014668569255636454406987595442886

        assert v0.y.x == 2904642719097145791045078226943519989198365235582891183632246465919405946692
        assert v0.y.y == -2795146103701632159401089785365795283506507052508791320476156071855192039089

        assert v0.z.x == -3484134613786115598800391266271932413736916835804080359806822019482271582854
        assert v0.z.y == -14589691489509402155615177384961891763356382098243339430952798368285193794667

    def test_gfp6_mul_zero(self):  # ✅
        zero = Gfp6.zero()
        c1 = self.a.mul(zero)
        assert c1.x == Gfp2.zero()
        assert c1.y == Gfp2.zero()
        assert c1.z == Gfp2.zero()

        c2 = zero.mul(self.a)
        assert c2.x == Gfp2.zero()
        assert c2.y == Gfp2.zero()
        assert c2.z == Gfp2.zero()

    def test_gfp6_mul_one(self):
        one = Gfp6(x=Gfp2(0, 0), y=Gfp2(0, 0), z=Gfp2(0, 1))
        c1 = self.a.mul(one)
        assert c1.x == self.a.x
        assert c1.y == self.a.y
        assert c1.z == self.a.z

        c2 = one.mul(self.a)
        assert c2.x == self.a.x
        assert c2.y == self.a.y
        assert c2.z == self.a.z

    def test_gfp6_mul_scalar(self):  # ✅
        c = self.a.mul_scalar(self.k)
        assert c.x == Gfp2(3097736870943666795708954126708706304, 30477790855578441254584921969449800636)
        assert c.y == Gfp2(1069193732659824844046297562601650, 2363246766651543736107878663456137082)
        assert c.z == Gfp2(12653364940238859830037996139396964118, 839385804770275831502287188319378)

    def test_gfp6_mul_tau(self):  # ✅
        c = self.a.mul_tau()
        assert c.x == Gfp2(82659782, 182703523765)
        assert c.y == Gfp2(978236549263, 64893242)
        assert c.z == Gfp2(4511634973760, 20966761207578)

    def test_gfp6_minimal(self):  # ✅
        a = self.a.copy()
        a.minimal()
        assert a == a

    def test_gfp6_set(self):  # ✅
        a = self.a.copy()
        b = Gfp6.zero().set(239487238491, 2356249827341, 82659782, 182703523765, 978236549263, 64893242)
        assert b == a

    def test_gfp6_set_zero(self):  # ✅
        a = self.a.copy()
        a.set_zero()
        assert a == Gfp6.zero()

    def test_gfp6_set_one(self):  # ✅
        a = self.a.copy()
        a.set_one()
        assert a == Gfp6.one()

    def test_gfp6_copy(self):  # ✅
        a = self.a.copy()
        assert a == self.a

    def test_gfp6_frobenius(self):  # ✅
        c = self.a.frobenius()
        assert c.x == Gfp2(14931392581312840707213000385983315788320556033369221428883596828794375370912,
                           13369338530947410995089301061977732954549984917121493388711335981786404982884)
        assert c.y == Gfp2(20636775655902454083545670628467355391684234100235184352851492698102263641556,
                           20099331093470501605207222604394429238644253656846441741596928934583131018819)
        assert c.z == Gfp2(21888242871839275222246405745257275088696311157297823662689037893666989659320, 64893242)

    def test_gfp6_frobenius_p2(self):  # ✅
        c = self.a.frobenius_p2()
        assert c.x == Gfp2(527820410331408338055522315602338499375877361048278540571507585023306,
                           5193081512596648872153002238818498129367400724338402008447459837202406)
        assert c.y == Gfp2(21888242871657096329007447749523392172569949604660210311542878531338466117389,
                           21888242469167928346865582730235943648211751503989164634122797272405122712828)
        assert c.z == Gfp2(978236549263, 64893242)

    def test_gfp6_mul_gfp(self):  # ✅
        k = 23423492374
        c = self.a.mul_gfp(k)
        assert c.x == Gfp2(5609627504464257767634, 55191599861960730197534)
        assert c.y == Gfp2(1936180773313502468, 4279554595612405268110)
        assert c.z == Gfp2(22913716351629955820362, 1520026359111136508)
