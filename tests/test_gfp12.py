from bn256.constants import P
from bn256.gfp12 import Gfp12
from bn256.gfp2 import Gfp2
from bn256.gfp6 import Gfp6


class TestGfp12:
    a = Gfp12(
        x=Gfp6(
            x=Gfp2(
                16959772746358961447531639332435565253132586675538970541925352279942642869086,
                20529146860950372950764457778674613865628586042047362385299339040035980910316,
            ),
            y=Gfp2(
                12371343915335581323226754138586411947106926040724454687685046822849788364169,
                5302186233890896362140391878987910359345213481773292606686596384175910479522,
            ),
            z=Gfp2(
                10914557400335351754640682754194947089871186086430636965641210881392388148916,
                3960196446351559690402867769979856478534484287235661509338329039186944132525,
            ),
        ),
        y=Gfp6(
            x=Gfp2(
                9799423186092126480361311359720967712223036292629465069289303860059951607195,
                19896784439962759671411254642907462495526914734343369086531065275566919106392,
            ),
            y=Gfp2(
                12979773189173878300859734129354721663835172363241486397866847865647290960497,
                19491763755116250515644665681628191311129986511526246065311446647106190468063,
            ),
            z=Gfp2(
                13862304884821375719578235596969805574908341722813411716236345810702355986479,
                4329574476227116086604384699606657749897858514493011474929266972671515389782,
            ),
        ),
    )

    b = Gfp12(
        x=Gfp6(
            x=Gfp2(
                6786311275283173227445911436830916167666397410948093951122139619286952258852,
                7751811708550036261844688389865453933752741015822474369305350472021257654804,
            ),
            y=Gfp2(
                18616443642521488080911061244488153858567453066079664242195824202426434634259,
                16292730421680176092203969303815922421355132857995087664663151033173558154544,
            ),
            z=Gfp2(
                2322502312297348644129065407206837122420313691933727749163367371161852422797,
                10003981112635513674896510014720621697551876739703361256993971585474055480140,
            ),
        ),
        y=Gfp6(
            x=Gfp2(
                20500882872134043638572764127466244022628954007740898970887096011390017522732,
                19486649824268708612543712172221576904888417029061133356266472045893821969006,
            ),
            y=Gfp2(
                12502422290271506204403054859357545206152842129107543520027115117836190792870,
                15654639589931868881781167254243001139451962127412316607213090534063958281168,
            ),
            z=Gfp2(
                13057051931299269946252249520048690082633816611814903688665997578956109939660,
                13288821652974198724638178513274151144869793134403413671545404282915198560010,
            ),
        ),
    )

    k = Gfp6(
        x=Gfp2(x=239487238491, y=2356249827341),
        y=Gfp2(x=82659782, y=182703523765),
        z=Gfp2(x=978236549263, y=64893242),
    )

    k2 = 23423492374

    def test_gfp12_invert(self):  # ✅
        c1 = self.a.invert()
        assert c1.x == Gfp6(Gfp2(15101931596556101994800494308426358921029913746349729711566898275358273949731,
                                 14136431163289238960401717355391821154943570141475349293383687422623968553779),
                            Gfp2(3271799229317787141335344500769121230128858091218159420493213692218791574324,
                                 5595512450159099130042436441441352667341178299302735998025886861471668054039),
                            Gfp2(19565740559541926578117340338050437966275997465364095913525670523483373785786,
                                 11884261759203761547349895730536653391144434417594462405695066309171170728443))
        assert c1.y == Gfp6(Gfp2(20500882872134043638572764127466244022628954007740898970887096011390017522732,
                                 19486649824268708612543712172221576904888417029061133356266472045893821969006),
                            Gfp2(12502422290271506204403054859357545206152842129107543520027115117836190792870,
                                 15654639589931868881781167254243001139451962127412316607213090534063958281168),
                            Gfp2(13057051931299269946252249520048690082633816611814903688665997578956109939660,
                                 13288821652974198724638178513274151144869793134403413671545404282915198560010))

        c2 = ~self.a
        assert c2 == c1

    def test_gfp12_add(self):  # ✅
        c1 = self.a + self.b
        assert c1.x == Gfp6(Gfp2(1857841149802859452731145024009206332102672929189240830358454004584368919355,
                                 6392715697661133990362740423282792710685015900572013091915651617412012356537),
                            Gfp2(9099544686017794181891409637817290716978067949506295267191833130630996789845,
                                 21594916655571072454344361182803832780700346339768380271349747417349468634066),
                            Gfp2(13237059712632700398769748161401784212291499778364364714804578252554240571713,
                                 13964177558987073365299377784700478176086361026939022766332300624660999612665))

        assert c1.y == Gfp6(Gfp2(8412063186386894896687669741929936646155679143072540377487361976804742921344,
                                 17495191392392193061708561069871764311719020606106678780108499426815514866815),
                            Gfp2(3593952607606109283016383243454991781291703335051206255204925088838255544784,
                                 13258160473208844175179427190613917361885637481640739009835499286524922540648),
                            Gfp2(5031113944281370443584079371761220568845847177330491742213305495013239717556,
                                 17618396129201314811242563212880808894767651648896425146474671255586713949792))
        c2 = self.b.add(self.a)
        assert c2 == c1

    def test_gfp12_sub(self):  # ✅
        c1 = self.a - self.b
        assert c1.x == Gfp6(Gfp2(10173461471075788220085727895604649085466189264590876590803212660655690610234,
                                 12777335152400336688919769388809159931875845026224888015993988568014723255512),
                            Gfp2(15643143144653368464562098639355533177235784131942614108178260515068579938493,
                                 10897698684049995492182828320429263026686391781076028604712483245647578533561),
                            Gfp2(8592055088038003110511617346988109967450872394496909216477843510230535726119,
                                 15844458205555321237752763500516509869678918704830123915033395348358114860968))

        assert c1.y == Gfp6(Gfp2(11186783185797358064034952977511998778290393442186389761091245743315160293046,
                                 410134615694051058867542470685885590638497705282235730264593229673097137386),
                            Gfp2(477350898902372096456679269997176457682330234133942877839732747811100167627,
                                 3837124165184381633863498427385190171678024384113929458098356113042232186895),
                            Gfp2(805252953522105773325986076921115492274525110998508027570348231746246046819,
                                 12928995695092192584212611931589781693724376537387421466072900584401543038355))
        c2 = self.a.sub(self.b)
        assert c2 == c1

    def test_gfp12_mul(self):  # ✅
        c1 = self.a * self.b
        assert c1.x == Gfp6(Gfp2(704334511288944715985592643533763154229481289055266748532635914559146626079,
                                 5811485431598573870327964381044576703120323186292605733965809636682702360458),
                            Gfp2(3938701168962133042319725987957295935896718564174823863358835563783473640216,
                                 13196622196465168870325855746691123179739567891030451467617260431646001171653),
                            Gfp2(3874017464503887327411298829042122494149792108775658966073303977248370020554,
                                 3875993544695035099079011685128482968518650230944236860357794786553547272773))

        assert c1.y == Gfp6(Gfp2(11452086817723887684610423891322968891853175673658918365138120353944485190566,
                                 20879503593629055601497702495749275070883999845509401375292852797185374093535),
                            Gfp2(19060490410745952444121031562610759314179530575482912336217454121658227713821,
                                 7750723104771454738446611552627371798374970088646433465717256263937190531485),
                            Gfp2(1936081324027206576571257599205286179411151382980775552645263098243782613342,
                                 18515061038618888450711699120645275750778583543381595852119387577671315173674))
        c2 = self.b.mul(self.a)
        assert c2 == c1

    def test_gfp12_negative(self):  # ✅
        c1 = -self.a
        assert c1.x == Gfp6(Gfp2(4928470125480313774714766412821709835563724481758853120763685614702583339497,
                                 1359096010888902271481947966582661223067725115250461277389698854609245298267),
                            Gfp2(9516898956503693899019651606670863141589385116573368975003991071795437844414,
                                 16586056637948378860106013866269364729351097675524531056002441510469315729061),
                            Gfp2(10973685471503923467605722991062327998825125070867186697047827013252838059667,
                                 17928046425487715531843537975277418610161826870062162153350708855458282076058))

        assert c1.y == Gfp6(Gfp2(12088819685747148741885094385536307376473274864668358593399734034585274601388,
                                 1991458431876515550835151102349812593169396422954454576157972619078307102191),
                            Gfp2(8908469682665396921386671615902553424861138794056337264822190028997935248086,
                                 2396479116723024706601740063629083777566324645771577597377591247539035740520),
                            Gfp2(8025937987017899502668170148287469513787969434484411946452692083942870222104,
                                 17558668395612159135642021045650617338798452642804812187759770921973710818801))
        c2 = self.a.negative()
        assert c2 == c1

    def test_gfp12_set_zero(self):  # ✅
        c = self.a.copy()
        c.set_zero()
        assert c == Gfp12.zero()
        assert c.is_zero() is True

    def test_gfp12_set_one(self):  # ✅
        c = self.a.copy()
        c.set_one()
        assert c == Gfp12.one()
        assert c.is_one() is True

    def test_gfp12_str(self):
        c = str(self.a)
        assert c == ('(((16959772746358961447531639332435565253132586675538970541925352279942642869086,'
                     '20529146860950372950764457778674613865628586042047362385299339040035980910316),'
                     '(12371343915335581323226754138586411947106926040724454687685046822849788364169,'
                     '5302186233890896362140391878987910359345213481773292606686596384175910479522),'
                     '(10914557400335351754640682754194947089871186086430636965641210881392388148916,'
                     '3960196446351559690402867769979856478534484287235661509338329039186944132525)),'
                     '((9799423186092126480361311359720967712223036292629465069289303860059951607195,'
                     '19896784439962759671411254642907462495526914734343369086531065275566919106392),'
                     '(12979773189173878300859734129354721663835172363241486397866847865647290960497,'
                     '19491763755116250515644665681628191311129986511526246065311446647106190468063),'
                     '(13862304884821375719578235596969805574908341722813411716236345810702355986479,'
                     '4329574476227116086604384699606657749897858514493011474929266972671515389782)))')
        assert self.a.string() == c

    def test_gfp12_repr(self):
        c = repr(self.a)
        assert c == ('<Gfp12 (((16959772746358961447531639332435565253132586675538970541925352279942642869086,'
                     '20529146860950372950764457778674613865628586042047362385299339040035980910316),'
                     '(12371343915335581323226754138586411947106926040724454687685046822849788364169,'
                     '5302186233890896362140391878987910359345213481773292606686596384175910479522),'
                     '(10914557400335351754640682754194947089871186086430636965641210881392388148916,'
                     '3960196446351559690402867769979856478534484287235661509338329039186944132525)),'
                     '((9799423186092126480361311359720967712223036292629465069289303860059951607195,'
                     '19896784439962759671411254642907462495526914734343369086531065275566919106392),'
                     '(12979773189173878300859734129354721663835172363241486397866847865647290960497,'
                     '19491763755116250515644665681628191311129986511526246065311446647106190468063),'
                     '(13862304884821375719578235596969805574908341722813411716236345810702355986479,'
                     '4329574476227116086604384699606657749897858514493011474929266972671515389782)))>')

    def test_gfp12_eq(self):  # ✅
        return Gfp12.zero() == Gfp12(Gfp6.zero(), Gfp6.zero())

    def test_gfp12_ne(self):  # ✅
        return Gfp12.one() != Gfp12(Gfp6.zero(), Gfp6.zero())

    def test_gfp12_conjugate(self):  # ✅
        c = self.a.conjugate()
        assert c.x == Gfp6(Gfp2(4928470125480313774714766412821709835563724481758853120763685614702583339497,
                                1359096010888902271481947966582661223067725115250461277389698854609245298267),
                           Gfp2(9516898956503693899019651606670863141589385116573368975003991071795437844414,
                                16586056637948378860106013866269364729351097675524531056002441510469315729061),
                           Gfp2(10973685471503923467605722991062327998825125070867186697047827013252838059667,
                                17928046425487715531843537975277418610161826870062162153350708855458282076058))

        assert c.y == Gfp6(Gfp2(9799423186092126480361311359720967712223036292629465069289303860059951607195,
                                19896784439962759671411254642907462495526914734343369086531065275566919106392),
                           Gfp2(12979773189173878300859734129354721663835172363241486397866847865647290960497,
                                19491763755116250515644665681628191311129986511526246065311446647106190468063),
                           Gfp2(13862304884821375719578235596969805574908341722813411716236345810702355986479,
                                4329574476227116086604384699606657749897858514493011474929266972671515389782))

    def test_gfp12_frobenius(self):  # ✅
        c = self.a.frobenius()
        assert c.x == Gfp6(Gfp2(17221337303402501978206517430319727057777765164407855597803802693186464066227,
                                16649530747827225967078565650634939139376225480369382025196985547763887959360),
                           Gfp2(19217403434689334746992844391010107153932938905010793674530092594337145013903,
                                6185017141221258496682242263937904484820033686708670141569459679349830652811),
                           Gfp2(7688276772640520702429516353658267568063372471968833386915546108282567943299,
                                19657088968172527453409139373859745759209105217760010642614895339634140663070))

        assert c.y == Gfp6(Gfp2(20470189984554691796825636693054533221780914264233533774928588006183453523839,
                                13585852589402082361930763802504130565618557756089657296948619548778412601072),
                           Gfp2(11718742134776649553599090971847092199977354339688519634736555600425057521306,
                                7520569181584470275460892185234337609262160809943606848916048319644585101369),
                           Gfp2(8025937987017899502668170148287469513787969434484411946452692083942870222104,
                                4329574476227116086604384699606657749897858514493011474929266972671515389782))

    def test_gfp12_frobenius_p2(self):  # ✅
        c = self.a.frobenius_p2()
        assert c.x == Gfp6(Gfp2(11401087327071394528579266066246291520039463311259970813138346728885608113035,
                                362250588477220394101065741310275561353919284539448462425008136314214774933),
                           Gfp2(9516898956503693899019651606670863141589385116573368975003991071795437844414,
                                16586056637948378860106013866269364729351097675524531056002441510469315729061),
                           Gfp2(6469450759575619697272094934413118499899672529664685492814788841147194845722,
                                765115428015413256329092356990282840210959188906470422859871683772502878518))

        assert c.y == Gfp6(Gfp2(4540185855912509246940764326624071043318763160904308438844411641538310026311,
                                12350010846680276740535590382344509316480074813273036108689461567760530429171),
                           Gfp2(10625571575649920867628355499998250892421134903371400041066296016126634018936,
                                5701003695448126583159329950051754766694150571868989930175224517388567237555),
                           Gfp2(13862304884821375719578235596969805574908341722813411716236345810702355986479,
                                4329574476227116086604384699606657749897858514493011474929266972671515389782))

    def test_gfp12_mul_scalar(self):  # ✅
        c = self.a.mul_scalar(self.k)
        assert c.x == Gfp6(Gfp2(14147426705690239533492730659718369413745732131757174863877428935423630085675,
                                6522042123307567711792429170048456482755948265611774829249722110565324089118),
                           Gfp2(10576217011757417127719408119535541039193248888716772555464994413304943761834,
                                19391988685862994806782593953623781258836909538449240014009881190890892925817),
                           Gfp2(9190203242296113994672435316200863843828674581184934560222179542664369337174,
                                17961934054986075571825254943115749767688726830288454692576975768957705818179))

        assert c.y == Gfp6(Gfp2(1270777825653567023535995970078606854434815821185049968327807683712835339109,
                                7094710203313198297887134195618587132601607174404906754390732600213726876961),
                           Gfp2(8745266243462218422992343367495419432048576186388030398775804291746573003164,
                                7729546461663661595954553290505882456710112198404304040379773423074417034111),
                           Gfp2(7889515367822909166376580133656399059655665426114826049891401401839584435034,
                                21715411644535928795708080010895774188742793590904448251851575202146063035636))

    def test_gfp12_exp(self):  # ✅
        c1 = self.a.exp(self.k2)
        assert c1.x == Gfp6(Gfp2(6252709633088421503452277482565196445192201115109686811917284959073084040390,
                                 15807004523818797414034432238534767691243692616604686037979399123182597289961),
                            Gfp2(17884078830115330720751857085573855290167943643543225568260123586417828880227,
                                 3955303143913535506389526143336175957354230188386402081798371807957083404327),
                            Gfp2(14848165407138108503199054244991865436379623412310260725333466194001116250242,
                                 12098843423585508705906528718324976670245971203444476044525380119170186237652))

        assert c1.y == Gfp6(Gfp2(20847306114609223409582026413109805917568028494216094378722654636266362315569,
                                 8436666976977434585010836816707473996833647968458493342797923295617766416797),
                            Gfp2(17476507304257898977870030639542362466181891017653186079548995403472150553658,
                                 15861954543279037305954388178066807475497451565384222870704128481285507162421),
                            Gfp2(16055911991422669216586005486078909508172703398879419518651648065578086735144,
                                 10598897829931024519233921275395172638033246797780826256495318599115525041723))

        c2 = self.a ** self.k2
        assert c2 == c1

    def test_gfp12_exp_big_k(self):  # ✅
        a = Gfp12(
            Gfp6(Gfp2(-11014852652891446520862309815985324294643912210021197319078582949131591300072,
                      12380803657962445451342849313046546290917196878132635661793822776720065725975),
                 Gfp2(23832943665693731502286553697402079195661264575372664052381217816113118682369,
                      -11404695585642926381801504270813233314585676588335640488981425137423048751106),
                 Gfp2(48590791798166687881182306472435820566908176820950996428234064003938111846611,
                      37579410665443448243404658681942853939876013585037538129987054043610413055035)),
            Gfp6(Gfp2(18296906883533588454265247089863481079788274512113598276548458994199809527630,
                      22701694980044664262131234793738336763377624652061334139879322642803492554777),
                 Gfp2(24386030501337914896263697524805604225694908983139376969332667446984428294309,
                      27249418401729245549108218907483014469744296319453501315800891105342071521928),
                 Gfp2(35935910851988947632974469688223153807823644103776960120102436329260370970618,
                      26414726367538170583761707063095840914901315286457149300341086457530953311374)),
        )

        k = 17789463703410470926570272169384173597171808111278036638494118056118083640224
        c = a.exp(k)

        assert c.x.x.x == 10594163110302469589431825014052350148074330794732552037515429755402306716708
        assert c.x.x.y == -3213203010098758025514299809247001557512677825324921711266425285098565865822

        assert c.x.y.x == 133652702866390190601543373197284275682345236087857593726293713581626717083032
        assert c.x.y.y == 112770348941490524642927734131872809920178222279134547469546392800048455324252

        assert c.x.z.x == -167817906150038527606467888371832811720290341184067093092855581734626225912330
        assert c.x.z.y == 53988157797543492592690217764295092584684114137594008964253223117408043198758

        assert c.y.x.x == -80839428605506623389221836001728910447873007149688421123062001214837745937506
        assert c.y.x.y == -43871417763411436980271332023387981144871911541819997577184955988140258760665

        assert c.y.y.x == 145204385727542175782703973289862612947857612406188520346303041622794885675207
        assert c.y.y.y == 59426556989369306355811403292073018718881918319326396466141554033580940586392

        assert c.y.z.x == 95937424816935579452176084482993102979202868167040139384231524676040694706947
        assert c.y.z.y == -245371949909119273285751722304202633465358314546141284619762071375966116495683

    def test_gfp12_one_square(self):  # ✅
        c = Gfp12.one().square()
        assert c == Gfp12.one()

    def test_gfp12_square(self):  # ✅
        c = self.a.square()
        assert c.x == Gfp6(Gfp2(11160266923077771340116686151558791009185780172270374022006358121901591181634,
                                18934978365929006157852304914283694892898568911672390796989574430540901362549),
                           Gfp2(16587022069596318050447894188431695514202542914566304405691706947227690364505,
                                3271905085180597774185993108875977712707078892494879076815969214102871924332),
                           Gfp2(21147084612240757822908237074076751926662176414364287780695051915459388051394,
                                16125306461294351566660610606351238424876714162372147034310009475446948483132))

        assert c.y == Gfp6(Gfp2(12630986404661065964318227118941675647265995826872145075574595262642202518180,
                                20093962529755317203176110211274863038372967446347013563903726407702717072424),
                           Gfp2(3722193113755105500982667751997728342323088582750319721779074841144893173784,
                                6916110253952231011178238099035017567730531935055815914227395385706477920938),
                           Gfp2(20466905119385894439929618649055554320052280924753682033346587741639092966925,
                                7124862620716667114473765096060799353236103209353096291769826266915525538103))

    def test_gfp12_square2(self):  # ✅
        ret = Gfp12(
            Gfp6(
                Gfp2(0, 0),
                Gfp2(1230963705252006574968625547542839295238587053038599988423323938940672873063,
                     11069569486811739057372884831879058296880156543308488198782892089307577125126),
                Gfp2(-6902852904101142470231558828490340946421060521505186027374637519751440430128,
                     -17966680078898033203359394977380822095549635988564624048266162560560882297745)
            ),
            Gfp6(
                Gfp2(-17864562046483384186106771228025795594455556469092587122459128393226268162833,
                     -12605821315909218821094826952298177528448917002050208798060509885274777411037),
                Gfp2(19532505252101439458991265327300432124487443519061783268256624996808904571292,
                     18658886069101525963899380261551116852616645416241590902916008822406296053835),
                Gfp2(40636818912914033342269871350756433907490646278304408173723078646758548463706,
                     142174671732088632065083726521707191129976629469893146158401069498771273111221),
            )
        )

        c = ret.square()

        assert c.x.x.x == 51165562018794240936709153055725154973312758960470951577633163028489320393686
        assert c.x.x.y == 49445235183205090610598723792381112652045690029337138511272908813975190885772

        assert c.x.y.x == 5809285438194291582090156453887039978396730471165782367264492931838811893384
        assert c.x.y.y == -5590292207403264318802179570731590567013014105017582640952312143710384078178

        assert c.x.z.x == -6968269227572231197600782532543864827473833671608160719613644038964543165708
        assert c.x.z.y == -29179382979018804311230354769923783526712764196486678861905596736570387589334

        assert c.y.x.x == -31690507074311820219802206056083500652035396767824924247864970940114384490436
        assert c.y.x.y == -35601960063959173485183237023657914626217243018390154799608349024228713539447

        assert c.y.y.x == 152894484458608711172045991724246800323018003485763422760373937399496315860819
        assert c.y.y.y == 78548076140221352888961189562047368518218417485746166271726804027857580653575

        assert c.y.z.x == -375846364712215740167452517650661232381477135512458668390927830863872154704593
        assert c.y.z.y == -121086673484931131988135909554712945324717056710223820721904131766640786823728

    def test_gfp12_square3(self):  # ✅
        a = Gfp12(
            Gfp6(
                Gfp2(10873390218947828701384095929271950794052398947276626343610454945513634908511,
                     -9507439213876829770903556432210728797779114279165188000895215117925160482608),
                Gfp2(1944700793854456280040147952144804106964953418074840389692179921467892473786,
                     -10483547286196348840444901474444041774110634568962183173707612757222177457477),
                Gfp2(4814306054488137436689494981921270389515554506355349102855988214647659429445,
                     15691167793604173021158252936685578851179702427739714467298016148965186846452),
            ),
            Gfp6(
                Gfp2(-3591335988305686767981158655393794008908036645184225386140578900445416680953,
                     813452108205389039884829048481061674681313494763510477190284748158266346194),
                Gfp2(2497787629498639674017291779548329136998597825841553306643629552339202085726,
                     5361175529889970326861813162225739381047985162155677653111853210696845313345),
                Gfp2(14047667980149672410728063942965878719127332946479136457413398434615144762035,
                     4526483495698895361515301317838565826205004129159325637652048562885727102791),
            )
        )
        c = a.square()

        assert c.x.x.x == -25695066648039805532179598908352577722304231440024009061999656590536588761590
        assert c.x.x.y == -3499972273800704949176803846585955012684331148708404723751063250727130031418

        assert c.x.y.x == 196394169895632179354647177281038194806087533919039556593460494847955866521506
        assert c.x.y.y == 177726834839420680344865354125809829812696030216005652399676800918070973230156

        assert c.x.z.x == -416872293734364556996454334823150308243523673386514143568733435270785717584328
        assert c.x.z.y == -76930447250983435571160744343435100339677509197362538403302225902068032985870

        assert c.y.x.x == -65751863916937191166405250031560514381996304697553877925416198193188487540850
        assert c.y.x.y == -75124641644776061803356065272115521427039855890785440164511204252909929269858

        assert c.y.y.x == 167340806034928221364367245494693124169342560337740890293215116190416743190226
        assert c.y.y.y == 46445527112162082767163766339235321385893283873693041141458860715652319506789

        assert c.y.z.x == 350271386834969785672840243799628070817613605588519264678755478071446416839399
        assert c.y.z.y == -183052475496639094027466451319945125395988469638519278396603063500736367693361

    def test_gfp12_set(self):  # ✅
        c = Gfp12.zero().set(
            16959772746358961447531639332435565253132586675538970541925352279942642869086,
            20529146860950372950764457778674613865628586042047362385299339040035980910316,
            12371343915335581323226754138586411947106926040724454687685046822849788364169,
            5302186233890896362140391878987910359345213481773292606686596384175910479522,
            10914557400335351754640682754194947089871186086430636965641210881392388148916,
            3960196446351559690402867769979856478534484287235661509338329039186944132525,
            9799423186092126480361311359720967712223036292629465069289303860059951607195,
            19896784439962759671411254642907462495526914734343369086531065275566919106392,
            12979773189173878300859734129354721663835172363241486397866847865647290960497,
            19491763755116250515644665681628191311129986511526246065311446647106190468063,
            13862304884821375719578235596969805574908341722813411716236345810702355986479,
            4329574476227116086604384699606657749897858514493011474929266972671515389782
        )
        assert c == self.a

    def test_gfp12_minimal(self):  # ✅
        a = self.a.copy()
        a.minimal()
        assert a == self.a
