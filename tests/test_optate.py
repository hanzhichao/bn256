from bn256.curve import CURVE_G, CurvePoint
from bn256.gfp12 import Gfp12
from bn256.gfp2 import Gfp2
from bn256.gfp6 import Gfp6
from bn256.optate import optimal_ate, miller, line_func_double, mul_line, line_func_add
from bn256.twist import TWIST_G, TwistPoint


class TestOptate:
    g1 = CURVE_G
    g2 = TWIST_G

    def test_line_func_double(self):  # ✅
        r = TwistPoint(
            Gfp2(11559732032986387107991004021392285783925812861821192530917403151452391805634,
                 10857046999023057135944570762232829481370756359578518086990519993285655852781),
            Gfp2(4082367875863433681332203403145435568316851327593401208105741076214120093531,
                 8495653923123431417604973247489272438418190587263600148770280649306958101930),
            Gfp2(0, 1),
            Gfp2(0, 1),
        )
        q = CurvePoint(1, 2, 1, 1)
        a, b, c, r_out = line_func_double(r, q)

        assert a.x == -73045294562028677229758750070385566935749079286635208298997011424529149783097
        assert a.y == -65181075641749560050640027193843514169515877940305297921866942629344433595395

        assert b.x == -11024309420427701215682208654346946819424198107411647841809329787417974498996
        assert b.y == -42892910846204335455575734995693433736916693143939676735341674545571682927354

        assert c.x == 32658943006907469450657627225163484546534810620747209664845928609712960748248
        assert c.y == 67965231384987451340839785979914179507345524698108801190162245194455664815440

        assert r_out.x.x == -33574719689893648050868370973934787128990408670393507348137512827186327608632
        assert r_out.x.y == 117509279024775130555523083373412303077470815635121613301605812856810281381884

        assert r_out.y.x == -41415365205126244681030222938224966145278956034555642246947848162722551516277
        assert r_out.y.y == -134867312344436760833210833783476190768747672672076947546926704610096902680873

        assert r_out.z.x == -13723507120112407859581998938966403952062608502111021246477555742216986021521
        assert r_out.z.y == -4896935025592412387036459250278730211859929982770623365148476596031310004723

        assert r_out.t.x == 10330268472257466031170228721677197859916943111809152503661784544381975534167
        assert r_out.t.y == 15915374250256036262025193763544517375670421121818762292285538720159717715354

    def test_mul_line(self):  # ✅
        r = Gfp12(
            Gfp6(
                Gfp2(0, 0),
                Gfp2(0, 0),
                Gfp2(0, 0),
            ),
            Gfp6(
                Gfp2(0, 0),
                Gfp2(0, 0),
                Gfp2(0, 1),
            ),
        )
        a = Gfp2(-73045294562028677229758750070385566935749079286635208298997011424529149783097,
                 -65181075641749560050640027193843514169515877940305297921866942629344433595395)
        b = Gfp2(-11024309420427701215682208654346946819424198107411647841809329787417974498996,
                 -42892910846204335455575734995693433736916693143939676735341674545571682927354)
        c = Gfp2(32658943006907469450657627225163484546534810620747209664845928609712960748248,
                 67965231384987451340839785979914179507345524698108801190162245194455664815440)

        mul_line(r, a, b, c)
        assert r.x.x == Gfp2(0, 0)
        assert r.x.y == Gfp2(14507676925328423659226872910643533419036165342556086351759140154051755051235,
                             483652973768265616099190041928311096573055531588173066200171054591245030354)
        assert r.x.z == Gfp2(10863933451411574006564197090910328269272113049886175820879708107227251709587,
                             883574897474214988917076494821116440475929170655970590036401243718769489812)

        assert r.y.x == Gfp2(0, 0)
        assert r.y.y == Gfp2(0, 0)
        assert r.y.z == Gfp2(10770700135068194228411221479906209457838499463449386002156890715067734539665,
                             2300502769469625674100568744142354241256591226215330202095131510519986189691)

    def test_line_func_add(self):  # ✅
        r = TwistPoint(
            Gfp2(-33574719689893648050868370973934787128990408670393507348137512827186327608632,
                 117509279024775130555523083373412303077470815635121613301605812856810281381884),
            Gfp2(-41415365205126244681030222938224966145278956034555642246947848162722551516277,
                 -134867312344436760833210833783476190768747672672076947546926704610096902680873),
            Gfp2(-13723507120112407859581998938966403952062608502111021246477555742216986021521,
                 -4896935025592412387036459250278730211859929982770623365148476596031310004723),
            Gfp2(10330268472257466031170228721677197859916943111809152503661784544381975534167,
                 15915374250256036262025193763544517375670421121818762292285538720159717715354),
        )

        a_affine = TwistPoint(
            Gfp2(11559732032986387107991004021392285783925812861821192530917403151452391805634,
                 10857046999023057135944570762232829481370756359578518086990519993285655852781),
            Gfp2(4082367875863433681332203403145435568316851327593401208105741076214120093531,
                 8495653923123431417604973247489272438418190587263600148770280649306958101930),
            Gfp2(0, 1),
            Gfp2(0, 1),
        )

        b_affine = CurvePoint(1, 2, 1, 1)
        r2 = Gfp2(18998749271943822924477361489362255781501469145925655872932224557079413539979,
                  14922964998483646676629501313514766888265760859103602404415903627362542533130)

        a, b, c, new_r = line_func_add(r, a_affine, b_affine, r2)
        assert a.x == 54111331398642720566641342522401268674111381530178592009682353696873532699925
        assert a.y == 43548360104639920181292237001240733329494697410748197914441127163640515573842

        assert b.x == -201746360242308819665007331638779362828600610598904761550305563175184402519178
        assert b.y == -556597889861495381241016971665517001287652195211980441193187884461108457683676

        assert c.x == -53206756106535396581182180305577163079684831487957267246295638299914301616172
        assert c.y == -85973547524272277101879682601989422966363891774578820976403549769724877556712

        assert new_r.x.x == -12086204543715207755078488913426167066926129656007244284529978108605391716536
        assert new_r.x.y == -4923279828822432723207805652528915606149089420199063700251534999141366109627
        assert new_r.y.x == -3158762829331410485694986573350615327999587315283164894437796508028880647990
        assert new_r.y.y == -5067463619566549551198199023705620618148861689338460263756336636140516475522
        assert new_r.z.x == -13301689026633849145295545076394290769921207871989316811573909574978575404043
        assert new_r.z.y == -21493386881068069275469920650497355741590972943644705244100887442431219389178
        assert new_r.t.x == 12491311582497713877168956316982514046901001190811017527169177463111618880233
        assert new_r.t.y == 17492536650178347100556312865422303867720250261574668141916075325733298184399

    def test_miller(self):  # ✅
        c = miller(self.g2, self.g1)
        assert c.x.x.x == 7762897910585566248876474081457857409523545747722444081647661291511215742107
        assert c.x.x.y == -20104737454125812495752310172136967366638842591696440988787686095258199607776

        assert c.x.y.x == -30876504592056304436451149225733621620828685736676544299016723329524169629473
        assert c.x.y.y == -24215832316481167089435755361266794597205130528950760500836590438065820203993

        assert c.x.z.x == -131856005110614483869238498836344806452844815193116698376166744698251519797460
        assert c.x.z.y == -133398338503378731814678938104854134082459818280111448481967165738301774740180

        assert c.y.x.x == 9505210809913762863138295966928167351866267748450795615669754019663450274209
        assert c.y.x.y == 21832488243646385559447736520651358588849084609265809674649596748994491903314

        assert c.y.y.x == 154187143672641324846644217399464591777815047346991037099939631627122503888615
        assert c.y.y.y == 138857536375428679220558567464333113772153711144136233432083389329883375892889

        assert c.y.z.x == -10041223391391126437820402713037686843735753165218841961731537556247738050112
        assert c.y.z.y == 173155727074231737615258045400778842983295262080655301264252639642519733602127

    def test_optimal_ate(self):  # ✅
        p = optimal_ate(self.g2, self.g1)
        assert p.x.x.x == -36291943388924125810871148410323613252911085699294832121685569512396245399159
        assert p.x.x.y == 6223602427219597392892794664899549544171383137467762280768257680446283161705

        assert p.x.y.x == 302465985998980069233243018277462918705605420266482443426069781714222083500926
        assert p.x.y.y == 187250995013281090019227918185164790983548918774084783057291293800587056619394

        assert p.x.z.x == -397817446018798076550824682787176502305910133681866638444307054917272233798465
        assert p.x.z.y == -89391996343544369914205855114938870953972877139705901537124451996518938483034

        assert p.y.x.x == 107008395830933987319875472754396498301242693702719749747967098417581052532704
        assert p.y.x.y == 110076211846834985444035612218029711296102429575391508678500276293944720763033

        assert p.y.y.x == -160449336400777700034513612921010176052958261956909504495884912408289192387680
        assert p.y.y.y == 203559983940867568391418883211543700364762739957218507731082712914783762920285

        assert p.y.z.x == 3758435817766288188804561253838670030762970764366672594784247447067868088068
        assert p.y.z.y == -341718551578644386583937402010528190091452755017035280651308399346002892829307
