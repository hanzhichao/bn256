from bn256.constants import P
from bn256.gfp2 import Gfp2


class TestGfp2:  # ✅
    a = Gfp2(x=23423492374, y=12934872398472394827398470)
    b = Gfp2(
        18742488583120675539250111499571117228056683382394783304772021860608273791564,
        20670591218426447831276008882215027160468863346340709509995647326125512156225,
    )
    a1 = Gfp2(
        8976912375500148605856579860129041842661898194547963847973860076358900303709,
        3559300243412363049369889123893668563697849122209017722051042494493414070561,
    )
    b1 = Gfp2(
        -10043971983218896274529627583026931763656513378536747765266942208707363865800582823878034526328256799434211780362708394261357051332009416266080982285981840,
        -12429715548168153940173251266764626616011191716959334141150286220422478085184476438432814212448070660349865388569347549476290975661147170634444664092664588,
    )
    k = 23423492374

    def test_gfp2_invert(self):  # ✅
        c1 = self.a.invert()
        expected_x = 17145718866539475311838629795100745129794940453386486841888900425076734010106
        expected_y = 4344934586399913983228216110824354614139497999583193620555646014117238839411
        assert c1.x == expected_x
        assert c1.y == expected_y

        c2 = ~self.a
        assert c2.x == expected_x
        assert c2.y == expected_y

    def test_gfp2_square(self):  # ✅
        c = self.a.square()
        assert c.x == 605959769968562458978170216608535560
        assert c.y == 167310923964763004031972044373266290267593322185024

    def test_gfp2_mul_xi(self):  # ✅
        c = self.a.mul_xi()
        assert c.x == 12934872398472605638829836
        assert c.y == 116413851586251530023093856

    def test_gfp2_double(self):  # ✅
        c = self.a.double()
        assert c.x == 46846984748
        assert c.y == 25869744796944789654796940

    def test_gfp2_mul_scalar(self):  # ✅
        c = self.a.mul_scalar(self.k)
        assert c.x == 548659994994836155876
        assert c.y == 302979884984281229489085108304267780

    def test_gfp2_mul_negative(self):  # ✅
        expected_x = -23423492374
        expected_y = -12934872398472394827398470

        c1 = self.a.negative()
        assert c1.x == expected_x
        assert c1.y == expected_y

        c3 = -self.a
        assert c3.x == expected_x
        assert c3.y == expected_y

    def test_gfp2_mul_exp(self):  # ✅
        c1 = self.a.exp(self.k)
        expected_x = 1422855587298033051823841061501603907753137852843589709909680606196872000488
        expected_y = 1762373902878543936359593140424481737273677823299347721346643499354734947370

        assert c1.x == expected_x
        assert c1.y == expected_y

        c2 = self.a ** self.k
        assert c2.x == expected_x
        assert c2.y == expected_y

    def test_gfp2_mul_one(self):  # ✅
        a = Gfp2.one()
        expected_x = 18742488583120675539250111499571117228056683382394783304772021860608273791564
        expected_y = 20670591218426447831276008882215027160468863346340709509995647326125512156225
        c1 = a.mul(self.b)
        assert c1.x == expected_x
        assert c1.y == expected_y

        c2 = self.b.mul(a)
        assert c2.x == expected_x
        assert c2.y == expected_y

    def test_gfp2_mul_zero(self):  # ✅
        b = Gfp2.zero()
        c1 = self.a.mul(b)
        assert c1.x == 0
        assert c1.y == 0

        c2 = b.mul(self.a)
        assert c2.x == 0
        assert c2.y == 0

    def test_gfp2_zero_add_zero(self):  # ✅
        a = Gfp2.zero()
        b = Gfp2.zero()
        c = a + b
        assert c.x == 0
        assert c.y == 0

    def test_gfp2_add_zero(self):  # ✅
        a = Gfp2.zero()
        c = a + self.b
        assert c.x == 18742488583120675539250111499571117228056683382394783304772021860608273791564
        assert c.y == 20670591218426447831276008882215027160468863346340709509995647326125512156225

    def test_gfp2_zero_sub_zero(self):  # ✅
        a = Gfp2.zero()
        b = Gfp2.zero()
        c = a - b
        assert c.x == 0
        assert c.y == 0

    def test_gfp2_zero_mult_xi(self):  # ✅
        a = Gfp2.zero()
        c = a.mul_xi()
        assert c.x == 0
        assert c.y == 0

    def test_gfp2_add(self):  # ✅
        a = Gfp2(
            8976912375500148605856579860129041842661898194547963847973860076358900303709,
            3559300243412363049369889123893668563697849122209017722051042494493414070561,
        )
        b = Gfp2(
            -10043971983218896274529627583026931763656513378536747765266942208707363865800582823878034526328256799434211780362708394261357051332009416266080982285981840,
            -12429715548168153940173251266764626616011191716959334141150286220422478085184476438432814212448070660349865388569347549476290975661147170634444664092664588,
        )

        expected_x = (
            -10043971983218896274529627583026931763656513378536747765266942208707363865800573846965659026179650942854351651320865732363162503368161442406004623385678131
        )
        expected_y = (
            -12429715548168153940173251266764626616011191716959334141150286220422478085184472879132570800085021290460741494900783851627168766643425119591950170678594027
        )

        c1 = a + b
        assert c1.x == expected_x
        assert c1.y == expected_y

        c2 = b + a
        assert c2.x == expected_x
        assert c2.y == expected_y

    def test_gfp2_add_sub(self):  # ✅
        c1 = self.a1 + self.b1 - self.b1
        assert c1.x == 8976912375500148605856579860129041842661898194547963847973860076358900303709
        assert c1.y == 3559300243412363049369889123893668563697849122209017722051042494493414070561

        c2 = self.a1 + self.b1 - self.a1
        assert (
                c2.x
                == -10043971983218896274529627583026931763656513378536747765266942208707363865800582823878034526328256799434211780362708394261357051332009416266080982285981840
        )
        assert (
                c2.y
                == -12429715548168153940173251266764626616011191716959334141150286220422478085184476438432814212448070660349865388569347549476290975661147170634444664092664588
        )

    def test_gfp2_self_add(self):  # ✅
        a1 = self.a1.copy()
        a1 += self.b1
        assert (
                a1.x
                == -10043971983218896274529627583026931763656513378536747765266942208707363865800573846965659026179650942854351651320865732363162503368161442406004623385678131
        )
        assert (
                a1.y
                == -12429715548168153940173251266764626616011191716959334141150286220422478085184472879132570800085021290460741494900783851627168766643425119591950170678594027
        )

    def test_gfp2_sub(self):  # ✅
        c = self.a1 - self.b1
        assert (
                c.x
                == 10043971983218896274529627583026931763656513378536747765266942208707363865800591800790410026476862656014071909404551056159551599295857390126157341186285549
        )
        assert (
                c.y
                == 12429715548168153940173251266764626616011191716959334141150286220422478085184479997733057624811120030238989282237911247325413184678869221676939157506735149
        )

    def test_gfp2_self_sub(self):  # ✅
        a1 = self.a1.copy()
        a1 -= self.b1
        assert (
                a1.x
                == 10043971983218896274529627583026931763656513378536747765266942208707363865800591800790410026476862656014071909404551056159551599295857390126157341186285549
        )
        assert (
                a1.y
                == 12429715548168153940173251266764626616011191716959334141150286220422478085184479997733057624811120030238989282237911247325413184678869221676939157506735149
        )

    def test_gfp2_mul(self):  # ✅
        c = self.a1 * self.b1
        assert c.x == 11481691242182049088186299286064965372735858462908436745370084348828487569065
        assert c.y == 13632571490939061242911485037521127182776900754265548330584221672080034287915

    def test_gfp2_self_mul(self):  # ✅
        a1 = self.a1.copy()
        a1 *= self.b1
        assert a1.x == 11481691242182049088186299286064965372735858462908436745370084348828487569065
        assert a1.y == 13632571490939061242911485037521127182776900754265548330584221672080034287915

    def test_gfp2_is_zero(self):  # ✅
        a = Gfp2.zero()
        assert a.is_zero() is True
        assert a.is_one() is False

    def test_gfp2_is_one(self):  # ✅
        a = Gfp2.one()
        assert a.is_zero() is False
        assert a.is_one() is True

    def test_gfp2_minimal(self):  # ✅
        b1 = self.b1.copy()
        b1.minimal()
        assert (b1.x, b1.y) == (
            8546054567084510213702087979829649379334478155905590654654877579908153642505,
            16139579011969924003167072243008781264330849687369222797192308270667855593532,
        )

    def test_gfp2_real_imag(self):  # ✅
        assert (
                self.b1.real()
                == -10043971983218896274529627583026931763656513378536747765266942208707363865800582823878034526328256799434211780362708394261357051332009416266080982285981840
        )
        assert (
                self.b1.imag()
                == -12429715548168153940173251266764626616011191716959334141150286220422478085184476438432814212448070660349865388569347549476290975661147170634444664092664588
        )

    def test_gfp2_string(self):  # ✅
        assert (
                self.b1.string() == "(8546054567084510213702087979829649379334478155905590654654877579908153642505,"
                                    "16139579011969924003167072243008781264330849687369222797192308270667855593532)"
        )

    def test_gfp2_repr(self):  # ✅
        assert (
                repr(self.b1) == "<Gfp2 (8546054567084510213702087979829649379334478155905590654654877579908153642505,"
                                 "16139579011969924003167072243008781264330849687369222797192308270667855593532)>"
        )

    def test_gfp2_add_neg(self):  # ✅
        c = -self.b1
        assert c + self.b1 == Gfp2.zero()

    def test_gfp2_eq(self):
        c = Gfp2(x=self.a.x + P, y=self.a.y - P)
        assert c == self.a

    def test_gfp2_ne(self):  # ✅
        assert Gfp2.zero() != Gfp2.one()

    def test_gfp2_set(self):  # ✅
        b1 = self.b1.copy()
        b1.set(0, 0)

        assert b1 == Gfp2.zero()

    def test_gfp2_set_zero(self):  # ✅
        b1 = self.b1.copy()
        b1.set_zero()

        assert b1 == Gfp2.zero()

    def test_gfp2_set_one(self):  # ✅
        b1 = self.b1.copy()
        b1.set_one()

        assert b1 == Gfp2.one()

    def test_gfp2_conjugate(self):  # ✅
        c = self.b1.conjugate()
        assert (
                c.x
                == 10043971983218896274529627583026931763656513378536747765266942208707363865800582823878034526328256799434211780362708394261357051332009416266080982285981840
        )
        assert (
                c.y
                == -12429715548168153940173251266764626616011191716959334141150286220422478085184476438432814212448070660349865388569347549476290975661147170634444664092664588
        )

    def test_gfp2_zero(self):  # ✅
        assert Gfp2.zero() == Gfp2(0, 0)

    def test_gfp2_one(self):  # ✅
        assert Gfp2.one() == Gfp2(0, 1)

    def test_gfp2_copy(self):  # ✅
        a = self.a.copy()
        assert a == self.a

    def test_gfp2_mul_scalar_double(self):
        r_out_z = Gfp2(-13301689026633849145295545076394290769921207871989316811573909574978575404043,
                       -21493386881068069275469920650497355741590972943644705244100887442431219389178)
        q_y = 2

        c = r_out_z.mul_scalar(q_y)
        assert c.x == -26603378053267698290591090152788581539842415743978633623147819149957150808086
        assert c.y == -42986773762136138550939841300994711483181945887289410488201774884862438778356

        c = c.double()
        assert c.x == -53206756106535396581182180305577163079684831487957267246295638299914301616172
        assert c.y == -85973547524272277101879682601989422966363891774578820976403549769724877556712
