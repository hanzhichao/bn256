from bn256.constants import ORDER
from bn256.g2 import G2, TWIST_G
from bn256.gfp2 import Gfp2
from bn256.twist import TwistPoint


class TestG2:
    def test_g2_marshal_unmarshal(self):
        g2_hex = (
            "2acdb197cc72762a07330242255fa7327cb7886c841e73637c036ea0714a6fce2d627160ac20fa545137262d4b07dd8d87006"
            "e6aa848c651e49394edff71c6f902dab3a52a26f1865f96a6401c60d4d0ddafb4df787729987c63935260a34e01182879fda9"
            "dd49a99b25111d85979ba1e7d6a9b54140a4fd6a9e356e20ce1330"
        )
        a = G2.unmarshal(bytes.fromhex(g2_hex))

        assert a.p.x.x == 19360568990362880031554516742891661397572788808249306265336095925067416498126
        assert a.p.x.y == 20528011702214616988497563517574092943725424083562184223187223555461595907833
        assert a.p.y.x == 1291038222714632810287398943567289527137746800819178279393022582390933114369
        assert a.p.y.y == 10927024198652806931362984014111739641223052030665938874860319507683811922736
        assert a.p.z.x == 0
        assert a.p.z.y == 1
        assert a.marshal().hex() == g2_hex

    def test_random_g2(self):  # ✅
        k, a = G2.random_g2()
        b = G2.scalar_base_mult(k)
        assert a.marshal() == b.marshal()

    def test_g2_add(self):  # ✅
        a = G2(
            TwistPoint(
                Gfp2(19360568990362880031554516742891661397572788808249306265336095925067416498126,
                     20528011702214616988497563517574092943725424083562184223187223555461595907833),
                Gfp2(1291038222714632810287398943567289527137746800819178279393022582390933114369,
                     10927024198652806931362984014111739641223052030665938874860319507683811922736),
                Gfp2(0, 1),
            )
        )
        b = G2.base()

        c = a + b
        assert c.p.x.x == -9774524727715630778082146218376696135597255111442046918963913335142686566973
        assert c.p.x.y == -44678281800892462269638307890731567350968836479030541036055316882100180631746
        assert c.p.y.x == -23320880250435705343170645871359012265531968629997881541137131652918855720794
        assert c.p.y.y == -6809999729540577670895017674089423156460035870951368300764100267837756930985
        assert c.p.z.x == 6286568957086289375119380302258523861402359264441596193851652347415176823599
        assert c.p.z.y == 2546313465456155517140420234574748163986975709330491390295630770293346098479

    def test_g2_scalar_mult(self):  # ✅
        a = G2.base()
        k = 32498273234
        c = a.scalar_mult(k)
        assert c.p.x.x == 79342498918014555057659957993707594198152816625318490795384086866231378483238
        assert c.p.x.y == 75064881631888316299786248174992043733548762922009969041763335514716661580046
        assert c.p.y.x == -80971837679158956612470671613901869115198702943314042635428128476153813680368
        assert c.p.y.y == -87766621548441252636986790424712567592503460630785843968260989606226302241177
        assert c.p.z.x == 25982220755985358399738943490213691755613536187583364732600184316426166927358
        assert c.p.z.y == 28839747431195664757690418033918501226209980182353693445864133946636662806562

    def test_g2_identity(self):  # ✅
        g2 = G2.scalar_base_mult(ORDER)
        assert g2.p.is_infinity()

    def test_random_g2_marshal(self):  # ✅
        k, g2 = G2.random_g2()
        g2_bytes = g2.marshal()

        b = G2.unmarshal(g2_bytes)
        assert b == g2
        assert b.marshal() == g2_bytes

    def test_get_g2_order(self):
        g = G2.scalar_base_mult(ORDER)
        one = G2.scalar_base_mult(1)
        c = g + one
        c.p.make_affine()

        assert c == one
